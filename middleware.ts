import { type NextMiddleware, NextResponse } from "next/server";
import { parse } from "./lib/middleware/utils";
import { getToken } from "next-auth/jwt";
import { env } from "./env/server.mjs";

export const config = {
    matcher: [
        /*
         * Match all paths except for:
         * 1. /api/ routes
         * 2. /_next/ (Next.js internals)
         * 3. /_proxy/, /_auth/ (special pages for OG tags proxying and password protection)
         * 4. /_static (inside /public)
         * 5. /_vercel (Vercel internals)
         * 6. /favicon.ico, /.*sitemap-index.xml, /.*sitemap.xml, /robots.txt (static files)
         * sitemap and robot.txt are generated by `next-sitemap`
         */
        "/((?!api/|_next/|_proxy/|_auth/|_static|_vercel|favicon.ico|.*sitemap-index.xml|.*sitemap.xml|robots.txt).*)",
    ],
};

const middleware: NextMiddleware = async (req, event) => {
    const { domain, path, key } = parse(req);
    const session = await getToken({ req });
    const isHost = [env.HOST, env.VERCEL_URL].includes(domain);

    if (!session?.email && !["/login", "/register", isHost ? "/" : undefined].includes(path)) {
        return NextResponse.redirect(new URL("/login", req.url));
    } else if (session?.email && (path === "/login" || path === "/register")) {
        if (isHost) {
            return NextResponse.rewrite(new URL("/treedeep", req.url));
        }

        return NextResponse.redirect(new URL("/", req.url));
    }

    // for public stats pages
    if (isHost && path.startsWith("/stats/")) {
        return NextResponse.rewrite(new URL(`/treedeep${path}`, req.url));
    }

    if (path.startsWith("/meta-tags")) {
        const url = req.nextUrl.searchParams.get("url");

        if (!url) {
            return NextResponse.rewrite(new URL("meta-tags", req.url));
        }

        return NextResponse.rewrite(
            new URL(`/api/edge/meta-tags?url=${url}`, req.url)
        );
    }
};

export default middleware;