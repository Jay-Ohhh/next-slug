import { type NextMiddleware, NextResponse, } from "next/server";
import { parse } from "./lib/middleware/utils";
import { getToken } from "next-auth/jwt";
import { env } from "./env/server.mjs";
import { i18n } from "./i18n.config";
import { getLocale } from "./lib/utils";

export const config = {
    matcher: [
        /*
         * Match all paths except for:
         * 1. /api/ routes
         * 2. /_next/ (Next.js internals)
         * 3. /_proxy/, /_auth/ (special pages for OG tags proxying and password protection)
         * 4. /_static (inside /public)
         * 5. /_vercel (Vercel internals)
         * 6. /favicon.ico, /.*sitemap-index.xml, /.*sitemap.xml, /robots.txt (static files)
         * sitemap and robot.txt are generated by `next-sitemap`
         */
        "/((?!api/|_next/|_proxy/|_auth/|_static|_vercel|favicon.ico|.*sitemap-index.xml|.*sitemap.xml|robots.txt).*)",
    ],
};

const middleware: NextMiddleware = async (req, event) => {
    const { domain, path, key } = parse(req);
    const isHost = [env.HOST, env.VERCEL_URL].includes(domain);
    const locale = getLocale(req);

    const isMissingLocale = i18n.locales.every(
        (locale) => !path.startsWith(`/${locale}/`) && path !== `/${locale}`
    );

    if (isMissingLocale) {
        // e.g. incoming request is /products
        // The new URL is now /en-US/products
        return NextResponse.redirect(
            new URL(`/${locale}${path}`, req.url)
        );
    }

    const indexPath = `/${locale}`;
    const loginPath = `/${locale}/login`;
    const registerPath = `/${locale}/register`;
    const metaTagsPath = `/${locale}/meta-tags/`;
    const statsPath = `/${locale}/stats/`;
    const changelogPath = `/${locale}/changelog/`;

    if (isHost) {
        const session = await getToken({ req });

        if (!session?.email &&
            ![indexPath, loginPath, registerPath].includes(path) &&
            [metaTagsPath, statsPath, changelogPath].some(p => !path.startsWith(p))
        ) {
            return NextResponse.redirect(new URL(loginPath, req.url));
        } else if (session?.email && [loginPath, registerPath].includes(path)) {
            return NextResponse.redirect(new URL(`/${locale}/projects`, req.url));
        } else if (path.startsWith(metaTagsPath.slice(0, -1))) {
            const url = req.nextUrl.searchParams.get("url");

            if (!url) {
                return NextResponse.rewrite(new URL(metaTagsPath.slice(0, -1), req.url));
            }

            return NextResponse.rewrite(
                new URL(`/api/edge/meta-tags?url=${url}`, req.url)
            );
        }
    } else {
        if (path === indexPath) {
            return NextResponse.rewrite(new URL(`/${locale}/domain`, req.url));
        } else if (!path.startsWith(statsPath)) {
            return NextResponse.redirect(new URL(`/${locale}/domain`, req.url));
        }
    }
};

export default middleware;